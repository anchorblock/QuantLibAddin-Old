
/* 
 Copyright (C) 2007 Ferdinando Ametrano
 Copyright (C) 2006 Eric Ehlers

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

// Excel functions coded by hand, to be registered with Excel
// alongside the autogenerated functions.
#include <qlo/qladdindefines.hpp>
#include <oh/enumerations/typefactory.hpp>
#include <qlo/enumerations/factories/calendarfactory.hpp>
#include <ql/time/date.hpp>
#include <ql/time/calendar.hpp>
#include <qlo/loop/loop_calendar.hpp>
#include <ohxl/loop.hpp>


#include <ohxl/callingrange.hpp>
#include <qlxl/session.hpp>
#include <qlxl/conversions/all.hpp>



#include <qlxl/functions/functioncount.hpp>
#include <ohxl/objecthandlerxl.hpp>



#include <qlo/calibrationhelpers.hpp>
#include <qlo/shortratemodels.hpp>
#include <qlo/pricingengines.hpp>
#include <qlo/indexes/ibor/euribor.hpp>
#include <qlo/optimization.hpp>
#include <ql/models/shortrate/calibrationhelpers/swaptionhelper.hpp>
#include <ql/indexes/ibor/euribor.hpp>
#include <ql/models/shortrate/onefactormodel.hpp>
#include <ql/models/shortrate/twofactormodels/g2.hpp>
#include <qlo/valueobjects/vo_calibrationhelpers.hpp>





#define XLL_DEC DLLEXPORT


XLL_DEC long *qlFunctionCount() {
    static long returnValue = FUNCTION_COUNT;
    return &returnValue;
}

// Repository URL of the working copy:
// $WCURL$

//XLL_DEC long *qlInfoHighestRevisionNumber() {
//    static long returnValue = $WCREV$;
//    return &returnValue;
//}
//
//XLL_DEC char *qlInfoTimeStamp() {
//    char *date = "$WCDATE$";
//    return date;
//}
//
//#define MIXED_REVISIONS $WCMIXED?1:0$
//XLL_DEC char *qlInfoRevisionRange() {
//    #if MIXED_REVISIONS
//    #   pragma message(__FILE__ "() warning: mixed update revisions ($WCRANGE$)")
//    #endif
//    char *revRange = "$WCRANGE$";
//    return revRange;
//}
//
//#define LOCAL_MODIFICATION $WCMODS?1:0$
//XLL_DEC bool *qlInfoLocalModifications() {
//    #if LOCAL_MODIFICATION
//    #   pragma message(__FILE__ "() warning: local modifications have been found")
//    static bool result = true;
//    #else
//    static bool result = false;
//    #endif
//    return &result;
//}

XLL_DEC OPER* qlCalendarHolidayList(
    char* calendar,
    OPER* FromDate,
    OPER* ToDate,
    OPER* IncludeWeekEnds,
    OPER* Trigger) {

    // declare a shared pointer to the Function Call object

    boost::shared_ptr<ObjectHandler::FunctionCall> functionCall;

    try {

        // instantiate the Function Call object

        functionCall = boost::shared_ptr<ObjectHandler::FunctionCall>(
            new ObjectHandler::FunctionCall("qlCalendarHolidayList"));

        ObjectHandler::validateRange(Trigger, "Trigger");

        // initialize the session ID (if enabled)

        SET_SESSION_ID

            // convert input datatypes to C++ datatypes

        ObjectHandler::property_t ToDateCpp = ObjectHandler::convert2<ObjectHandler::property_t>(
                ObjectHandler::ConvertOper(*ToDate));

        ObjectHandler::property_t FromDateCpp = ObjectHandler::convert2<ObjectHandler::property_t>(
            ObjectHandler::ConvertOper(*FromDate));

        bool IncludeWeekEndsCpp = ObjectHandler::convert2<bool>(
            ObjectHandler::ConvertOper(*IncludeWeekEnds), "IncludeWeekEnds", false);

        // convert input datatypes to QuantLib datatypes

        QuantLib::Date ToDateLib = ObjectHandler::convert2<QuantLib::Date>(
            ObjectHandler::ConvertOper(*ToDate), "ToDate");

        QuantLib::Date FromDateLib = ObjectHandler::convert2<QuantLib::Date>(
            ObjectHandler::ConvertOper(*FromDate), "FromDate");

        // convert input datatypes to QuantLib enumerated datatypes

        QuantLib::Calendar calendarEnum =
            ObjectHandler::Create<QuantLib::Calendar>()(calendar);

        // invoke the member function

        std::vector<QuantLib::Date> returnValue = calendarEnum.holidayList(
            FromDateLib,
            ToDateLib,
            IncludeWeekEndsCpp);

        // convert and return the return value

        std::vector<long> returnValVec = QuantLibAddin::libraryToVector(returnValue);
        static OPER xRet;
        ObjectHandler::vectorToOper(returnValVec, xRet);
        return &xRet;

    }
    catch (const std::exception& e) {
        ObjectHandler::RepositoryXL::instance().logError(e.what(), functionCall);
        return 0;
    }
    catch (...) {
        ObjectHandler::RepositoryXL::instance().logError("unkown error type", functionCall);
        return 0;
    }

}



XLL_DEC bool* qlOneFactorAffineModelCalibrate(
    char* ObjectId,
    OPER* BlackCalibrationHelpers,
    char* Method,
    char* EndCriteria,
    char* Constraint,
    OPER* Weights,
    OPER* FixedCoeff,
    OPER* Trigger) {

    // declare a shared pointer to the Function Call object

    boost::shared_ptr<ObjectHandler::FunctionCall> functionCall;

    try {

        // instantiate the Function Call object

        functionCall = boost::shared_ptr<ObjectHandler::FunctionCall>(
            new ObjectHandler::FunctionCall("qlOneFactorAffineModelCalibrate"));

        ObjectHandler::validateRange(Trigger, "Trigger");

        // initialize the session ID (if enabled)

        SET_SESSION_ID

            // convert input datatypes to C++ datatypes

            std::vector<std::string> BlackCalibrationHelpersCpp =
            ObjectHandler::operToVector<std::string>(*BlackCalibrationHelpers, "BlackCalibrationHelpers");

        std::vector<double> WeightsCpp =
            ObjectHandler::operToVector<double>(*Weights, "Weights");

        std::vector<bool> FixedCoeffCpp =
            ObjectHandler::operToVector<bool>(*FixedCoeff, "FixedCoeff");

        // convert input datatypes to QuantLib datatypes

        std::vector<QuantLib::Real> WeightsLib =
            ObjectHandler::operToVector<QuantLib::Real>(*Weights, "Weights");

        // convert object IDs into library objects

        OH_GET_REFERENCE(ObjectIdLibObjPtr, ObjectId,
            QuantLibAddin::OneFactorAffineModel, QuantLib::OneFactorAffineModel)

            std::vector<boost::shared_ptr<QuantLib::BlackCalibrationHelper> > BlackCalibrationHelpersLibObjPtr =
            ObjectHandler::getLibraryObjectVector<QuantLibAddin::BlackCalibrationHelper, QuantLib::BlackCalibrationHelper>(BlackCalibrationHelpersCpp);

        std::vector<boost::shared_ptr<QuantLib::CalibrationHelper> > CalibrationHelpersLibObjPtr(BlackCalibrationHelpersLibObjPtr.begin(), BlackCalibrationHelpersLibObjPtr.end());

        OH_GET_UNDERLYING_NONCONST(MethodLibObj, Method,
            QuantLibAddin::OptimizationMethod, QuantLib::OptimizationMethod)

            OH_GET_UNDERLYING(EndCriteriaLibObj, EndCriteria,
                QuantLibAddin::EndCriteria, QuantLib::EndCriteria)

            OH_GET_UNDERLYING(ConstraintLibObj, Constraint,
                QuantLibAddin::Constraint, QuantLib::Constraint)

            // invoke the member function

            static bool returnValue = true;
        ObjectIdLibObjPtr->calibrate(
            CalibrationHelpersLibObjPtr,
            MethodLibObj,
            EndCriteriaLibObj,
            ConstraintLibObj,
            WeightsLib,
            FixedCoeffCpp);

        // convert and return the return value

        return &returnValue;

    }
    catch (const std::exception& e) {
        ObjectHandler::RepositoryXL::instance().logError(e.what(), functionCall);
        return 0;
    }
    catch (...) {
        ObjectHandler::RepositoryXL::instance().logError("unkown error type", functionCall);
        return 0;
    }

}


XLL_DEC bool* qlModelG2Calibrate(
    char* ObjectId,
    OPER* BlackCalibrationHelpers,
    char* Method,
    char* EndCriteria,
    char* Constraint,
    OPER* Weights,
    OPER* FixedCoeff,
    OPER* Trigger) {

    // declare a shared pointer to the Function Call object

    boost::shared_ptr<ObjectHandler::FunctionCall> functionCall;

    try {

        // instantiate the Function Call object

        functionCall = boost::shared_ptr<ObjectHandler::FunctionCall>(
            new ObjectHandler::FunctionCall("qlModelG2Calibrate"));

        ObjectHandler::validateRange(Trigger, "Trigger");

        // initialize the session ID (if enabled)

        SET_SESSION_ID

            // convert input datatypes to C++ datatypes

            std::vector<std::string> BlackCalibrationHelpersCpp =
            ObjectHandler::operToVector<std::string>(*BlackCalibrationHelpers, "BlackCalibrationHelpers");

        std::vector<double> WeightsCpp =
            ObjectHandler::operToVector<double>(*Weights, "Weights");

        std::vector<bool> FixedCoeffCpp =
            ObjectHandler::operToVector<bool>(*FixedCoeff, "FixedCoeff");

        // convert input datatypes to QuantLib datatypes

        std::vector<QuantLib::Real> WeightsLib =
            ObjectHandler::operToVector<QuantLib::Real>(*Weights, "Weights");

        // convert object IDs into library objects

        OH_GET_REFERENCE(ObjectIdLibObjPtr, ObjectId,
            QuantLibAddin::G2, QuantLib::G2)

            std::vector<boost::shared_ptr<QuantLib::BlackCalibrationHelper> > BlackCalibrationHelpersLibObjPtr =
            ObjectHandler::getLibraryObjectVector<QuantLibAddin::BlackCalibrationHelper, QuantLib::BlackCalibrationHelper>(BlackCalibrationHelpersCpp);
            
            std::vector<boost::shared_ptr<QuantLib::CalibrationHelper> > CalibrationHelpersLibObjPtr(BlackCalibrationHelpersLibObjPtr.begin(), BlackCalibrationHelpersLibObjPtr.end());


        OH_GET_UNDERLYING_NONCONST(MethodLibObj, Method,
            QuantLibAddin::OptimizationMethod, QuantLib::OptimizationMethod)

            OH_GET_UNDERLYING(EndCriteriaLibObj, EndCriteria,
                QuantLibAddin::EndCriteria, QuantLib::EndCriteria)

            OH_GET_UNDERLYING(ConstraintLibObj, Constraint,
                QuantLibAddin::Constraint, QuantLib::Constraint)

            // invoke the member function

            static bool returnValue = true;
        ObjectIdLibObjPtr->calibrate(
            CalibrationHelpersLibObjPtr,
            MethodLibObj,
            EndCriteriaLibObj,
            ConstraintLibObj,
            WeightsLib,
            FixedCoeffCpp);

        // convert and return the return value

        return &returnValue;

    }
    catch (const std::exception& e) {
        ObjectHandler::RepositoryXL::instance().logError(e.what(), functionCall);
        return 0;
    }
    catch (...) {
        ObjectHandler::RepositoryXL::instance().logError("unkown error type", functionCall);
        return 0;
    }

}